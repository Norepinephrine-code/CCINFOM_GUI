/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import java.awt.Dimension;
import controller.PatientService;
import dto.ServiceResult;

import model.Patient;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ACER
 */
public class PatientRecordsView extends javax.swing.JPanel {
    /**
     * Creates new form PatientRecordsView
     */
    public PatientRecordsView() {
        initComponents();
        this.setPreferredSize(new Dimension(600, 500));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        scrollPatientTable = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        txtFirstName = new javax.swing.JTextField();
        txtDob = new javax.swing.JTextField();
        lblFirstName = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        lblDob = new javax.swing.JLabel();
        lblPatientId = new javax.swing.JLabel();
        txtPatientId = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        btnShow = new javax.swing.JButton();

        scrollPatientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(scrollPatientTable);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        txtFirstName.setText("First Name");

        txtDob.setText("yyyy-MM-dd");
        txtDob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDobActionPerformed(evt);
            }
        });

        lblFirstName.setText("First Name");

        lblLastName.setText("Last Name");

        txtLastName.setText("Last Name");
        txtLastName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLastNameActionPerformed(evt);
            }
        });

        lblDob.setText("Date-Of-Birth");

        lblPatientId.setText("Enter Patient ID:");

        txtPatientId.setText("patientId");
        txtPatientId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientIdActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 246, 246));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnShow.setText("Show");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnShow, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtPatientId)
                        .addComponent(lblDob, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtLastName)
                        .addComponent(lblFirstName, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtFirstName)
                        .addComponent(lblLastName, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtDob, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                        .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblPatientId, javax.swing.GroupLayout.Alignment.LEADING)))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(lblFirstName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblLastName)
                        .addGap(2, 2, 2)
                        .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDob)
                        .addGap(4, 4, 4)
                        .addComponent(txtDob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(lblPatientId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDelete)
                            .addComponent(btnShow))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        PatientService service = new PatientService(null);

        String firstName = txtFirstName.getText().trim();
        String lastName = txtLastName.getText().trim();
        String dobStr = txtDob.getText().trim();

        Patient patient = new Patient();
        patient.setFirstName(firstName);
        patient.setLastName(lastName);
        try {
            patient.setDateOfBirth(java.sql.Date.valueOf(dobStr));
        } catch (IllegalArgumentException e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid date format. Use yyyy-MM-dd");
            return;
        }

        ServiceResult result = service.addPatient(patient);
        javax.swing.JOptionPane.showMessageDialog(this, result.getMessage());

        if (result.getStatus()) {
            java.util.List<Patient> patients = service.getAllPatients();
            String[] columnNames = {"ID", "First Name", "Last Name", "DOB"};
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);
            if (patients != null) {
                for (Patient p : patients) {
                    Object[] row = {p.getPatientId(), p.getFirstName(), p.getLastName(), p.getDateOfBirth()};
                    model.addRow(row);
                }
            }
            scrollPatientTable.setModel(model);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void txtDobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDobActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDobActionPerformed

    private void txtLastNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLastNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLastNameActionPerformed

    private void txtPatientIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientIdActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        PatientService service = new PatientService(null);
        try {
            int patientId = Integer.parseInt(txtPatientId.getText().trim());
            ServiceResult result = service.deletePatient(patientId);
            javax.swing.JOptionPane.showMessageDialog(this, result.getMessage());

            if (result.getStatus()) {
                java.util.List<Patient> patients = service.getAllPatients();
                String[] columnNames = {"ID", "First Name", "Last Name", "DOB"};
                DefaultTableModel model = new DefaultTableModel(columnNames, 0);
                if (patients != null) {
                    for (Patient p : patients) {
                        Object[] row = {p.getPatientId(), p.getFirstName(), p.getLastName(), p.getDateOfBirth()};
                        model.addRow(row);
                    }
                }
                scrollPatientTable.setModel(model);
            }
        } catch (NumberFormatException e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please enter a valid numeric Patient ID.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        PatientService service = new PatientService(null);
        java.util.List<Patient> patients = service.getAllPatients();
        String[] columnNames = {"ID", "First Name", "Last Name", "DOB"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        if (patients != null) {
            for (Patient p : patients) {
                Object[] row = {p.getPatientId(), p.getFirstName(), p.getLastName(), p.getDateOfBirth()};
                model.addRow(row);
            }
        }
        scrollPatientTable.setModel(model);
    }//GEN-LAST:event_btnShowActionPerformed

    private void loadPatientsToTable() {
        PatientService service = new PatientService(null);
        List<Patient> patients = service.getAllPatients();

        String[] columnNames = {"ID", "First Name", "Last Name", "DOB"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        if (patients != null) {
            for (Patient p : patients) {
                Object[] row = {p.getPatientId(), p.getFirstName(), p.getLastName(), p.getDateOfBirth()};
                model.addRow(row);
            }
        }

        scrollPatientTable.setModel(model);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnShow;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDob;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblPatientId;
    private javax.swing.JTable scrollPatientTable;
    private javax.swing.JTextField txtDob;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtPatientId;
    // End of variables declaration//GEN-END:variables
}
